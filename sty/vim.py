常规模式下用空格键来开关光标行所在折叠
（注：zR 展开所有折叠，zM 关闭所有折叠）
显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换

常规模式下输入 cS 清除行尾空格
常规模式下输入 cM 清除行尾 ^M 符号
Ctrl + K 插入模式下光标向上移动

Ctrl + J 插入模式下光标向下移动
.vimrc中快捷键：
	Ctrl + H 插入模式下光标向左移动
	Ctrl + L 插入模式下光标向右移动

	F9 一键保存、编译、连接存并运行
	Ctrl + F9 一键保存并编译
	Ctrl + F10 一键保存并连接

	我主要用于C/C++代码注释(其它的也行)
	以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
	<Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
	<Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
	<Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
	<Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
	<Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
	<Leader>cA 行尾注释
	let NERDSpaceDelims = 1                     "在左注释符之后，右注释符之前留有空格


g++ -fexec
	-charset=gbk 
	-Wall 
	-g  只是编译器，在编译的时候，产生调试信息。
	-O0 优化级别
	-c 只激活预处理,编译,和汇编,也就是他只把程序做成obj文件
	% -o %<.o
实际需要：
	在当前行插入下一行：o
	在当前行插入上一行：O
	删除当前行: dd

	行首、行尾：home、end
	第一行，最后一行：gg，G，XG
	行间单词移动：左、ge，右、e
	删除当前单词：diw，daw(删空格)
	删除左边字符: X
	删除右边字符: x

	复制当前行：yy
	剪切：d
	粘贴：p
	撤销：u

	滚动半屏 向上：ctrl+u
	滚动半屏 向下：ctrl+d
	回到原来位置：ctrl+o

	进入插入模式：i
	在当前行首进入插入模式：A
	在当前行尾进入插入模式：I
----------------------------------------------------------------

1、Vim 有以下几个模式：
    正常（normal）模式，缺省的编辑模式；下面如果不加特殊说明，提到的命令都直接在正常模式下输入；任何其它模式中都可以通过键盘上的 Esc 键回到正常模式。
    命令（command）模式，用于执行较长、较复杂的命令；在正常模式下输入“:”（一般命令）、“/”（正向搜索）或“?”（反向搜索）即可进入该模式；命令模式下的命令要输入回车键（Enter）才算完成。
    插入（insert）模式，输入文本时使用；在正常模式下键入“i”（insert）或“a”（append）即可进入插入模式（也有另外一些命令，如“c”，也可以进入插入模式，但这些命令有其它的作用）。
    可视（visual）模式，用于选定文本块；可以在正常模式下输入“v”（小写）来按字符选定，输入“V”（大写）来按行选定，或输入“Ctrl-V”来按方块选定。
    选择（select）模式，与普通的 Windows 编辑器较为接近的选择文本块的方式；在以可视模式和选择模式之一选定文本块之后，可以使用“Ctrl-G”切换到另一模式——该模式很少在 Linux 上使用，本文中就不再介绍了。

2、编码问题：
在 Linux 上，常见的情况是环境的内部编码使用 UTF-8 [6]，而 UTF-8 可以同任何一种语言编码作无损转换，这就保证了系统的多语言处理能力。因此，Vim 这方面秉承了 Unix/Linux 的传统，在内部编码使 UTF-8 的时
候，可以同时处理不同意语言编码的文件。

以下列出了和语言编码的相关的设置：
	环境变量 LANG（使用的语言）；
	环境变量 LC_CTYPE（使用的内部编码）；#Linux 下的惯例，内部编码一律使用 UTF-8
	Vim 选项 encoding（Vim 的内部编码）；#默认是utf-8
	Vim 选项 termencoding（Vim 在与屏幕/键盘交互时使用的编码）；
	Vim 选项 fileencoding（Vim 当前编辑的文件在存储时的编码）；
	Vim 选项 fileencodings（Vim 打开文件时的尝试使用的编码）；
	Vim 选项 ambiwidth（对“不明宽度”字符的处理方式；Vim 6.1.455 后引入）。

注：如果你的环境只需要处理简体中文的话，那么，最简单的方式就是所有的设定全部使用简体中文。只需要：
设定 LANG=zh_CN.GB2312，
不设定 LC_CTYPE（默认跟 LANG 一样），
不设定与编码相关的 Vim 选项（默认由 LANG 和 LC_CTYPE 决定），
也无需设定 Vim 选项ambiwidth。

encoding=utf-8：不管文件的编码如何，不管如何显示和输入，Vim 内部使用的编码是 UTF-8；
termencoding：取决于实际的终端或 X Window 的设定。
	如果选择语言简体中文登录到 X Window，或者正在使用 CXTERM [10]的话，那么该选项应被设为 GB2312；
	如果使用缺省的语言（LANG=en_US.UTF-8）登录到 X Window，或者使用 PuTTY [11] 远程访问
	Linux 机器、并且设定里的字符编码（配置中 Window-Translation）设为 UTF-8 的话，该选项就应该设为 utf-8
fileencoding：文件载入时，该选项被置为 Vim 认定的文件编码。如果创建新文件，你又不希望使用 UTF-8 作为文件编码时，那么，你可能需要手工设定该选项，如“:setfileencoding=gb2312”
fileencodings=ucs-bom,utf-8,chinese：Vim 会首先判断文件的开头是否是一个 Unicode [7] 的 BOM（byte order mark）字符 [8]，是的话则
	把文件的其余内容解释成相应的 Unicode 序列；否的话再试图把文件内容解释成 UTF-8 的序列；再再失败的话，则把文件解释为简体中文
ambiwidth=double：把所有的“不明宽度”字符 [9]——指的是在 Unicode 字符集中某些同时在东西方语言中使用的字符，如省略号、破折号、
	书名号和全角引号，在西方文字中通常字符宽度等同于普通 ASCII 字符，而在东方文字中通常字符宽度等同于两倍的普通 ASCII 字符，因而
	其宽度“不明”——的宽度置为双倍字符宽度（中文字符宽度）。

3、鼠标的支持：“:set mouse=a”
	单击移动光标到点击的位置；
	在帮助的关键字上双击显示该关键字相关的帮助信息；
	在普通文本上双击选中点击位置的单词；
	拖动鼠标选中文本；
	使用鼠标滚轮滚动当前缓冲区中的文本；
	多窗口编辑时可以拖动窗口分栏的位置。

4、空格、制表符和缩进

5、Vim 中的模式行
实际上，它所做的是在打开文件时根据文件中的 Vim 指令设定相关的 Vim 选项。下面就是一个嵌在 C 源代码中的模式行：
	/* vim: set tabstop=4 shiftwidth=4 expandtab: */

6、寄存器

7、搜索、替换和正则表达式
	使用“/模式”（或“?模式”）进行搜索
	使用“:s/模式/字符串/标志”进行替换，其中的“模式”是一个正则表达式。
	#注：搜索里最最有用的一个快捷方式是“*”（向下完整匹配光标下的单词）。把光标移动到你要搜索的词（变量名、函数名等）上，比如“test”，然后按“*”，Vim 将自动产生一个对“\<test\>”（参见“:help /\<”和“:help /\>”）的搜索

8、自动完成和路径设定
	“Ctrl-P”（向前搜索可匹配的单词并完成）就可以得到完整的变量名
	“Ctrl-N”（向后搜索可匹配的单词并完成）
	“Ctrl-X Ctrl-L”（搜索可匹配的行并完成）
	“Ctrl-X Ctrl-F”（搜索可匹配的文件名并完成）等


9、文件跳转和 Tags
如何在一个典型的多文件、多层目录的项目中使用其基本功能：
	我们只需在项目的根目录处键入“ctags -R .”，Ctags 即可自动在文件中查找、识别支持的文件格式、生成 tags 文件
	
	:tag 关键字（跳转到与“关键字”匹配的标记处）
	:tselect [关键字]（显示与“关键字”匹配的标记列表，输入数字跳转到指定的标记）
	:tjump [关键字]（类似于“:tselect”，但当匹配项只有一个时直接跳转至标记处而不再显示列表）
	:tn（跳转到下一个匹配的标记处）
	:tp（跳转到上一个匹配的标记处）
	Ctrl-]（跳转到与光标下的关键字匹配的标记处；除“关键字”直接从光标位置自动获得外，功能与“:tags”相同）
	g]（与“Ctrl-]”功能类似，但使用的命令是“:tselect”）
	g Ctrl-]（与“Ctrl-]”功能类似，但使用的命令是“:tjump”）
	Ctrl-T（跳转回上次使用以上命令跳转前的位置）

10、Make 和 grep
直接在 Vim 的命令模式里输入相应的 make 或 grep 命令（如“:grep foo *.c”）即可将命令的执行
结果放入该窗口，同时根据返回的结果跳转到第一个错误（make 的情况；在使用 grep 时是匹配成功之处）。以下是常用的“快速修订”命令：
	:cn（显示下一个错误）
	:cp（显示上一个错误）
	:cl（列出所有的错误及其编号）
	:cc（跳转到指定编号的错误）
	:copen（打开快速修订窗口，在其中显示所有错误，可在错误上双击鼠标或按回车键跳转至该错误；示例参见图 4）
	:cclose（关闭快速修订窗口）















